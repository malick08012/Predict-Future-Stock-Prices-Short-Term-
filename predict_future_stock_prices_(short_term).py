# -*- coding: utf-8 -*-
"""Predict Future Stock Prices (Short-Term)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TZSrG1BwVWmkNcyxjlHbJFr-uogbCNLq

#Install & Import Required Libraries

yfinance ( lets us download stock data directly from Yahoo Finance )
"""

# Install yfinance to get stock data
!pip install yfinance

# Import necessary libraries
import yfinance as yf                     # For fetching stock data
import pandas as pd                       # For data manipulation
import numpy as np                        # For numerical operations
import matplotlib.pyplot as plt           # For visualization

from sklearn.linear_model import LinearRegression  # Regression model
from sklearn.model_selection import train_test_split  # For splitting data
from sklearn.metrics import mean_squared_error, r2_score  # For evaluation

"""#Download Apple Stock Data
Download Apple's stock data from Jan 1, 2015 to today.

This includes daily values like Open, High, Low, Close, Adj Close, and Volume.
"""

# Download Apple (AAPL) stock data from 2015 to today
stock_data = yf.download('AAPL', start='2015-01-01')

# Check first few rows and columns
print(stock_data.columns)
stock_data.head()

"""#Prepare the Features and Target Variable
Features (X): We’ll use to make predictions (Open, High, Low, Volume)

Target (y): We want to predict — the Closing Price

We drop any rows with missing values to avoid errors during modeling.
"""

# Drop missing values (if any)
stock_data = stock_data.dropna()

# Select features and target
X = stock_data[['Open', 'High', 'Low', 'Volume']]
y = stock_data['Close']

"""#Train/Test Split
We split the dataset into 80% for training and 20% for testing.

shuffle=False because time series data must keep chronological order.


"""

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, shuffle=False
)

"""#Train the Linear Regression Model
 Creating and training a Linear Regression model to learn the relationship between the input features and the closing price.



"""

model = LinearRegression()
model.fit(X_train, y_train)

"""#Predict and Evaluate the Model"""

y_pred = model.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R² Score: {r2:.2f}")

"""#Result
R² Score: Explains how well our model fits the data. 1.00 = perfect

RMSE: The average prediction error — lower is better.

Our models average error is just $1.16, which is very low — that is excellent!

#Visualize Actual vs Predicted Prices
"""

plt.figure(figsize=(12,6))
plt.plot(y_test.values, label='Actual Price', color='blue')
plt.plot(y_pred, label='Predicted Price', color='red')
plt.title('Apple Stock: Actual vs Predicted Closing Prices')
plt.xlabel('Time')
plt.ylabel('Price ($)')
plt.legend()
plt.grid(True)
plt.show()

"""#Result
This plot shows how closely the models predictions (red) match the actual prices (blue).

Good overlap = good model performance.

#Predict the Next Day’s Closing Price
"""

print(f" Predicted Closing Price for Next Day: ${float(next_day_price):.2f}")

"""#Final Insights
✅ Linear Regression Performs Well for Stable Stocks

Apple showed smoother price trends, making it easier for the linear model to learn.

✅ Open, High, Low, Volume are Strong Predictors

These features are enough to predict Close price with high accuracy, especially when used with clean time-series data.

✅ Chronological Splitting Avoided Data Leakage

Time-aware train-test splitting ensured real-world conditions were simulated (training on past, predicting future).

✅ Perfect R² Can Be Misleading

Model show R² = 1.00, that doesn’t guarantee future predictions will always bethis good.

Real-world prediction is affected by external factors like news, market sentiment, and global events  which this model doesn’t use.


"""